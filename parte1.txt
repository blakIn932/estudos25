hello world, a pasta '.git' e de controle interno do git

# comandos 

# 1 - git barnch -m nome_atual novo_nome
## renomear branch, nao precisa remover ela ao renomear ja fica certo 

# 2 - rm -fr .git/
## remover a pasta git, remove tudo, historico, trackeamento, tudo e removido 

# 3 - git add .
## adicionamos a stagging para commit, '.' adiciona todos 

# 4 - git rm --cached arquivo.extensao
##  serve para tirar o arquivo da stage

# 5 - git status  | grep hello
## eu procuro pelo status dos arquivos, se ele foi modificado aparece modified e senao esta trackaeado aparece '??'

# 6 - git status --short | grep '??'
## mostra arquivos nao trackeados 

# 7- git rm --cached -r .
##  remove todos os arquivos em stage

#### Estados 
# untracked: nao rastreado
# staged: preparado
# commit: git conhece esta dentro do projeto 
# unmodified: nao modificado, git nao lista arquivo sem alteracoes
# modified: modificado
# **** Se eu fizer um 'git add .' e dps modificar o arquivo o que esta sendo modificado nao entra em commit, pois ele so manda para commit o q esta em stage 

# 8 - git diff id_commit
## mostra as alteracoes de cada arquivo 

# 9 - git diff id_commit | grep -A 20 hello
## -A 20 sao 20 linhas q ele vai mostrar, hello nome do arquivo q ele vai buscar no diff
# ***** tem q ser o id do commit senao ele pega work Area 

# 10 - git log
## git lista em ordem decrescente, o id e gerado pelo char1 
# *** head indica o o commit mais recente

# 11 - git log  --oneline 
## mostra o id abreviado e as informacoes reduzidas(mensagem e has do commit)
# git log --oneline -1 : pego abreviado 1 commit 

# 12 - git log -1(Numero de commits q quero ver)
## ele olha de forma decrescente 

# 13 - git log -p -2
## ele mostra tanto o log como o diff


# 14 - git log --stat 
## ele mostra de resumo do q foi feito em cada um commit e dentro dos commits quais arquivos 
# tiveram insertion,delection 